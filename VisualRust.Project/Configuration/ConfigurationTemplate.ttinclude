using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.VisualStudioTools.Project;

namespace VisualRust.Project.Configuration
{
    partial class <#= GetClassName() #>
    {
        public event EventHandler Changed;
<# foreach(var f in Fields) { #>
        private <#= f.Type #> <#= f.NameLower #>;
        public <#= f.Type #> <#= f.NameUpper #>
        {
            get { return <#= f.NameLower #>; }
            set
            {
                <#= f.NameLower #> = value;
                var temp = Changed;
                if(temp != null)
                    temp(this, new EventArgs());
            }
        } 
<# } #>

        public bool HasChangedFrom(<#= GetClassName() #> obj)
        {
            return false
<# foreach(var f in Fields) { #>
            || (!EqualityComparer<<#= f.Type #>>.Default.Equals(<#= f.NameUpper #>, obj.<#= f.NameUpper #>))
<# } #>
            ;
        }

        public <#= GetClassName() #> Clone()
        {
            return new <#= GetClassName() #>
            {
<# foreach(var f in Fields) { #>
                <#= f.NameUpper #> = this.<#= f.NameUpper #>,
<# } #>
            };
        }

<# if(IsConfigurationDependent(Scope)) { /* Aggregate load */ 
    if(Scope == ConfigScope.Configuration) { #>
        public static <#= GetClassName() #> LoadFrom(ProjectConfig[] configs)
<#  } else { #>
        public static <#= GetClassName() #> LoadFrom(MsBuild.Configuration[] configs)
<#  } #>
        {
            return configs.Select(LoadFromForConfig).Aggregate((prev, cur) =>
            {
<# foreach(var f in Fields) { #>
                if(prev.<#= f.NameUpper #> != null && !EqualityComparer<<#= f.Type #>>.Default.Equals(prev.<#= f.NameUpper #>, cur.<#= f.NameUpper #>))
                    prev.<#= f.NameUpper #> = null;
<# } #>
                return prev;
            });
        }
<# } #>

<# if(IsConfigurationDependent(Scope)) { 
    if(Scope == ConfigScope.Configuration) { #>
        private static <#= GetClassName() #> LoadFromForConfig(ProjectConfig cfg)
<#  } else { #>
        private static <#= GetClassName() #> LoadFromForConfig(MsBuild.Configuration cfg)
<#  } #>
        {
            var x = new <#= GetClassName() #>();
<# foreach(var f in Fields) { 
    if(f.Normalize) { #>
            x.<#= f.NameUpper #> = <#= f.NameUpper #>FromString(cfg.GetConfigurationProperty("<#= f.Key #>", false));
<#  } else { #>
            Utils.FromString(cfg.GetConfigurationProperty("<#= f.Key #>", false), out x.<#= f.NameLower #>);
<#  }
} #>
            return x;
        }
<# } else { #>
        public static <#= GetClassName() #> LoadFrom(CommonProjectNode proj)
        {
            var x = new <#= GetClassName() #>();
<# foreach(var f in Fields) { 
    if(f.Normalize) { #>
            x.<#= f.NameUpper #> = <#= f.NameUpper #>FromString(proj.GetUnevaluatedProperty("<#= f.Key #>"));
<#  } else { #>
            Utils.FromString(proj.GetUnevaluatedProperty("<#= f.Key #>"), out x.<#= f.NameLower #>);
<#  }
} #>
            return x;
        }
<# } #>

<# if(IsConfigurationDependent(Scope)) { 
    if(Scope == ConfigScope.Configuration) { #>
        public void SaveTo(ProjectConfig[] configs)
<#  } else { #>
        public void SaveTo(MsBuild.Configuration[] configs)
<#  } #>
        {
            foreach(var cfg in configs)
            {
<# foreach(Field f in Fields) { #>
                if(<#= f.NameUpper #> != null)
<#  if(f.Normalize) { #>
                    cfg.SetConfigurationProperty("<#= f.Key #>", <#= f.NameUpper #>ToString(<#= f.NameUpper #>));
<#  } else { #>
                    cfg.SetConfigurationProperty("<#= f.Key #>", <#= f.NameUpper #>.ToString());
<#  }
} #>
            }
        }
<# } else { #>
        public void SaveTo(CommonProjectNode proj)
        {
<# foreach(Field f in Fields) {
    if(f.Normalize) { #>
            proj.SetProjectProperty("<#= f.Key #>", <#= f.NameUpper #>ToString(<#= f.NameUpper #>));
<#  } else { #>
            proj.SetProjectProperty("<#= f.Key #>", <#= f.NameUpper #>.ToString());
<#  }
} #>
        }
<# } #>
    }
}
<#+
    string GetClassName()
    {
        return System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile);
    }

    enum ConfigScope
    {
        Project, // configuration independant from the current config and platform
        Configuration, // configuration depending on the current config and platform
        User // configuration kept in .rsproj.user file
    }

    bool IsConfigurationDependent(ConfigScope s)
    {
        return s == ConfigScope.Configuration || s == ConfigScope.User;
    }

    class Field
    {
        public string Name { get; set; }
        public object Type { get; set; }
        public string Key { get; set; }
        public bool Normalize { get; set; }
        public string NameUpper { get { return char.ToUpper(Name[0]) + Name.Substring(1); } }
        public string NameLower { get { return char.ToLower(Name[0]) + Name.Substring(1); } }
    }
#>